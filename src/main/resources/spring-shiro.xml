<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- web.xml中shiro的filter对应的bean -->

    <!--注册filter bean-->
    <bean id="anyRolesAuthorizationFilter" class="cn.kgc.filter.AnyRolesAuthorizationFilter"/>

    <!-- Shiro 的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/login.jsp" />
        <!-- 认证成功统一跳转到index.html，建议不配置，shiro认证成功自动到上一个请求路径 -->
        <property name="successUrl" value="/index.jsp"/>
        <!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
        <property name="unauthorizedUrl" value="/index1.jsp" />
        <!-- 自定义filter配置 -->
        <!-- <property name="filters">
            <map>
                将自定义 的FormAuthenticationFilter注入shiroFilter中
                <entry key="authc" value-ref="formAuthenticationFilter" />
            </map>
        </property> -->

        <!-- 声明自定义标签 hasAnyRoles-->
        <property name="filters">
            <map>
                <entry key="hasAnyRoles" value-ref="anyRolesAuthorizationFilter"/>
            </map>
        </property>


        <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源设置匿名访问 -->
                /statices/** = anon
                /js/** = anon
                <!-- login，register可匿名访问 -->
                /employee/toLogin = anon
                /employee/login = anon
                /login.jsp = anon
                /employee/toRegister = anon
                /WEB-INF/view/organization/employee_register.jsp = anon
                /employee/register = anon
                /process/forIndexProcess = anon

                <!--功能模块访问权限设置-->

                <!--/chart/store = roles[物料部]-->
                <!--/chart/produce = roles["生产部,产销管理部"]-->
                <!--/chart/quality = roles[品质部]-->

                /chart/store = hasAnyRoles[物料部,系统管理]
                /chart/produce = hasAnyRoles[生产部,产销管理部,系统管理]
                /chart/quality = hasAnyRoles[品质部,系统管理]




                <!-- 请求 logout.action地址，shiro去清除session-->
                /employee/logout = logout
                <!--/logout.jsp = logout-->

                <!--商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 -->
                <!-- /items/queryItems.action = perms[item:query]
                /items/editItems.action = perms[item:edit] -->
                <!-- 配置记住我或认证通过可以访问的地址 -->
                /login.jsp  = user
                /index.jsp = user
                <!-- /** = authc 所有url都必须认证通过才可以访问-->
                /** = authc
                <!-- /** = anon所有url都可以匿名访问 -->

            </value>
        </property>
    </bean>

    <!-- securityManager安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm" />
        <!-- 注入缓存管理器 -->
        <!-- <property name="cacheManager" ref="cacheManager"/>  -->
        <!-- 注入session管理器 -->
        <property name="sessionManager" ref="sessionManager" />
        <!-- 记住我 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>

    </bean>

    <!-- realm -->
    <bean id="customRealm" class="cn.kgc.realm.CustomerRealm">
        <!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5" />
        <property name="hashIterations" value="1024" />
    </bean>

    <!-- 缓存管理器 -->
    <!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
    </bean> -->

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

    <!-- rememberMeManager管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie" />
    </bean>
    <!-- 记住我cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe" />
        <!-- 记住我cookie生效时间30天 -->
        <property name="maxAge" value="2592000" />
    </bean>
</beans>